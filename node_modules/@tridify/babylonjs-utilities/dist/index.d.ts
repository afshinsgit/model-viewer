import '@babylonjs/core/Engines/engine';
import { ArcRotateCamera, Scene, AbstractMesh, Vector3 } from '@babylonjs/core';
import "@babylonjs/loaders/glTF/2.0";
/**
 * Frame scene. First it calculates the radius of the entire scene.
 * Then it calculates this based on camera fov so that the entire building is visible in camera view.
 * Then it sets camera target to scene origin.
 * Then it moves the camera so that the model is in 45 degree angle from the model based on architecture standards.
 * Then it sets camera radius
 * Then creates collision box if meshToFrame is give
 * @param {Scene} scene - The Babylon scene to frame.
 * @param {ArcRotateCamera} orbitCamera - Optional - The orbit camera to frame. If missing, use scene active camera
 * @param {AbstractMesh[]} meshesToFrame - Optional - meshes to use for framing. If missing use all in scene.
 * @param {number} minOrbitZoom - Optional - the minimum distance that the camera can zoom to to the center of the model. If missing, third of diameter.
 */
export declare function frameScene(scene: Scene, orbitCamera?: ArcRotateCamera, meshesToFrame?: AbstractMesh[], collisionMesh?: AbstractMesh, minOrbitZoom?: number): void;
/**
 * Get bounding distance.
 * @param {Scene} scene - The Babylon scene to frame.
 * @param {ArcRotateCamera} orbitCamera - The orbit camera to frame.
 * @returns {number} - The bounding distance from origo.
 */
export declare function getMaxBoundingDistanceFromOrigo(meshes: AbstractMesh[]): number;
/**
 * Load model based from a Tridify model hash
 * @param {Scene} scene - The Babylon scene to import model into.
 * @param {string} uid - The Tridify model hash.
 */
export declare function loadModel(scene: Scene, uid: string): Promise<void>;
/**
* Center the imported meshes based on a standard deviation distance from each other
* @param {AbstractMesh[]} meshesToCenter - An array of meshes to center by
* @param {AbstractMesh[]} allMeshes - All meshes
* @returns {Vector3} - the vector to offset all meshes by
*/
export declare function centerModel(meshesToCenter: AbstractMesh[], allMeshes: AbstractMesh[]): Vector3;
/**
* Add a ArcRotateCamera to the scene with IFC based settings
* @param {Scene} scene - The current Babylon scene
* @returns {ArcRotateCamera} - a Babylon ArcRotateCamera
*/
export declare function createOrbitCamera(targetScene: Scene): ArcRotateCamera;
declare module '@babylonjs/core/Meshes/abstractMesh.js' {
    interface AbstractMesh {
        ifcType: string;
    }
}
/**
* Load Ifc data object
* @param {string} uid - conversionID.
* @param {string} property - Optional - property to load properties under ifc object.
*/
export declare function loadIfc(uid: string, property?: string): Promise<any>;
